(* semaphore solution to producer-consumer problem *)
program prodcon;

const
  buffmax = 4;
var 
  buffer: array[0..buffmax] of char;
  nextin, nextout: integer;
  spacesleft, itemsready: semaphore;
  mutex: semaphore;

process producer;
var 
  data: char;
begin
  for data := 'a' to 'z' do
    begin
    wait(spacesleft);
    wait(mutex);
	 buffer[nextin] := data;
	 nextin := (nextin + 1) mod (buffmax + 1);
    signal(mutex);
    signal(itemsready)
    end
end;  (* producer *)
 
process consumer;
var 
  data: char;
begin
  repeat
    begin
    wait(itemsready);
    wait(mutex);
    data := buffer[nextout];
    nextout := (nextout + 1) mod (buffmax + 1);
    signal(mutex);
    signal(spacesleft);
    write(data);
    end
  until data = 'z';
  writeln
end;  (* consumer *)

begin
  initial(spacesleft,buffmax + 1);
  initial(itemsready,0);
  initial(mutex,1);
  nextin := 0;
  nextout := 0;
  cobegin
    producer;
    consumer
  coend
end.
